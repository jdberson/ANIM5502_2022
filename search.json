[
  {
    "objectID": "dung_beetles/dung_beetles_data_cleaning.html",
    "href": "dung_beetles/dung_beetles_data_cleaning.html",
    "title": "Data cleaning",
    "section": "",
    "text": "First we need to load the packages we well be using.\n\nlibrary(\"tidyverse\")\nlibrary(\"readxl\")\nlibrary(\"janitor\")"
  },
  {
    "objectID": "dung_beetles/dung_beetles_data_cleaning.html#import-and-clean-data",
    "href": "dung_beetles/dung_beetles_data_cleaning.html#import-and-clean-data",
    "title": "Data cleaning",
    "section": "Import and clean data",
    "text": "Import and clean data\nNow we are ready to import the data to R and clean it up!\n\ndb_data <- \n  \n  # Use the readxl package to load the data directly from Excel\n  read_xlsx(\"data/CSIRO quarantine project data.xlsx\", \n            sheet = \"Group data\", na = c(\"\", \"N/A\", \"NA\")) %>%\n  \n  # Use the janitor package to make the column headings more R friendly\n  clean_names() %>%\n  \n  # Filter rows with all missing values\n  filter(is.na(notes) | notes != \"Missing\") %>%\n  \n  # Change columns to numeric\n  mutate(across(pronotum_length:head_horn, as.numeric)) %>%\n  \n  # Create a new group_id term for joining with vial info - note this is hacky!\n  # Note the third line - this is necessary to add in the leading zeros where\n  # they are missing\n  mutate(id_new = id, .after = id) %>%\n  separate(id_new, into = c(\"pop\", \"sex1\", \"individual\")) %>%\n  mutate(pop = sprintf(\"%02d\", as.integer(pop))) %>%\n  unite(\"group_id\", pop, sex1, sep = \"_\") %>%\n  select(-individual) %>%\n  \n  # Rename species and sex columns so that we can check these against vial info\n  rename(sex_data = sex, species_data = species) %>%\n  \n  # Combine with the 'Vial info' worksheet\n  left_join(\n    \n    # Load and clean 'Vial info' sheet\n    read_xlsx(\"data/CSIRO quarantine project data.xlsx\", \n              sheet = \"Vial info\") %>%\n      clean_names()%>%\n      drop_na(id) %>%\n      select(-x8, -horn_priorities) %>%\n      rename(sex_vial = sex, species_vial = species) %>%\n      separate(id, into = c(\"pop\", \"sex1\")) %>%\n      mutate(pop = sprintf(\"%02d\", as.integer(pop))) %>%\n      unite(\"group_id\", pop, sex1, sep = \"_\"),\n    \n    # The 'by' argument tells left_join() which variable to use for joining\n    by = \"group_id\"\n    \n  ) %>%\n  \n  # Move the information about the individuals to the start of the tibble\n  relocate(group_id, species_vial, species_data, shipment, generation, \n           treatment, sex_vial, sex_data, .after = id) %>%\n  \n  # Change generation to an integer - need to remove the 'f'\n  mutate(generation = as.integer(str_remove(generation, \"F\"))) %>%\n  \n  # Species and sex information in group data sheet appear incorrect for some\n  # records\n  rename(species = species_vial, sex = sex_vial) %>%\n  select(-c(species_data, sex_data)) %>%\n  \n  # Change the treatment assignment of generation 0 beetles to 'P' for parental.\n  mutate(treatment = if_else(generation == 0, \"P\", treatment)) %>%\n  \n  # Include sphericity measure\n  mutate(sphericity = (body_depth^2 / (body_length * elytra_width))^(1/3), \n         .after = head_horn) %>%\n  \n  # Some head horns have been reported in uM instead of mm - change those here\n  mutate(head_horn = if_else(head_horn > 20, head_horn/1000, head_horn))\n\nThat took a lot of code just to import and clean the data!\nThis provides an important lesson - we could have saved ourselves some effort cleaning the data by setting more guidelines around data entry."
  },
  {
    "objectID": "dung_beetles/dung_beetles_data_cleaning.html#save-the-cleaned-data",
    "href": "dung_beetles/dung_beetles_data_cleaning.html#save-the-cleaned-data",
    "title": "Data cleaning",
    "section": "Save the cleaned data",
    "text": "Save the cleaned data\nLet’s save the clean data in a new file.\n\nwrite_csv(db_data, \"data/db_data.csv\")"
  },
  {
    "objectID": "dung_beetles/dung_beetles_data_exploration.html",
    "href": "dung_beetles/dung_beetles_data_exploration.html",
    "title": "Data exploration",
    "section": "",
    "text": "As before we need to load the packages we will use.\n\nlibrary(\"tidyverse\")\nlibrary(\"GGally\")\n\nWe will also set the ggplot theme for all plots.\n\ntheme_set(theme_minimal())\ntheme_update(strip.text = element_text(face = \"bold\", size=10, hjust=0), \n             strip.background = element_rect(fill = \"grey80\", colour = NA),\n             axis.text = element_text(size=10, colour = \"black\"),\n             axis.title = element_text(size=12, colour = \"black\"))"
  },
  {
    "objectID": "dung_beetles/dung_beetles_data_exploration.html#load-and-view-the-data",
    "href": "dung_beetles/dung_beetles_data_exploration.html#load-and-view-the-data",
    "title": "Data exploration",
    "section": "Load and view the data",
    "text": "Load and view the data\nNow let’s load and inspect our clean data file.\n\n# Read in the data\ndb_data <- read_csv(\"data/db_data.csv\")\n\n# Look at the data (in RStudio you could use View(db_data))\ndb_data\n\n\n\n  \n\n\n\nFrom the data frame we can see that we have 1352 observations.\nThat’s helpful, but we would really like to know how many observations per species/shipment/generation/sex combination.\nGiven that not all individuals could have each trait measured, it may also be helpful to look at this information, particularly for horns given that this is the trait with the least measurements."
  },
  {
    "objectID": "dung_beetles/dung_beetles_data_exploration.html#sample-size-information",
    "href": "dung_beetles/dung_beetles_data_exploration.html#sample-size-information",
    "title": "Data exploration",
    "section": "Sample size information",
    "text": "Sample size information\n\n# Total individuals in each species/sex/generation/shipment/generation\n# combination\ntotal_n <- \n  db_data %>%\n  group_by(species, sex, generation, shipment, treatment) %>%\n  count()\n\ntotal_n\n\n\n\n  \n\n\n\nI find it difficult to get a quick overview of this information from a table. Plotting it in a figure can help.\n\nggplot(data = total_n, aes(x = generation, y = n, colour = treatment, shape = sex)) +\n  geom_point(position = position_dodge(0.3)) +\n  geom_line(position = position_dodge(0.3)) +\n  facet_wrap(~species*shipment)\n\n\n\n\nIt’s a little more convoluted to get the the sample sizes separately for each trait.\n\n# In total\ntotal_n_by_trait <- \ndb_data %>%\n  pivot_longer(pronotum_width:head_horn, names_to = \"response\") %>%\n  drop_na(value) %>%\n  group_by(response) %>%\n  count() %>%\n  pivot_wider(names_from = response, values_from = n)\n\ntotal_n_by_trait\n\n\n\n  \n\n\n# For each species/sex/generation/shipment/generation combination\ntotal_n_group_by_trait <- \ndb_data %>%\n  pivot_longer(pronotum_width:head_horn, names_to = \"response\") %>%\n  drop_na(value) %>%\n  group_by(species, sex, generation, shipment, treatment, response) %>% \n  count() %>%\n  pivot_wider(names_from = response, values_from = n, names_prefix = \"n_\")\n\ntotal_n_group_by_trait\n\n\n\n  \n\n\n\nLet’s visualise the sample size by group for horns\n\nggplot(data = total_n_group_by_trait %>% drop_na(n_head_horn), \n       aes(x = generation, y = n_head_horn, colour = treatment, shape = sex)) +\n  geom_point(position = position_dodge(0.3)) +\n  geom_line(position = position_dodge(0.3)) +\n  facet_wrap(~species*shipment)"
  },
  {
    "objectID": "dung_beetles/dung_beetles_data_exploration.html#pairs-plots",
    "href": "dung_beetles/dung_beetles_data_exploration.html#pairs-plots",
    "title": "Data exploration",
    "section": "Pairs plots",
    "text": "Pairs plots\nI often find it very useful to visualise the correlations among traits. This can be great for detecting outliers, and for getting a better understanding about the distribution of the data.\nThe following code will produce a series of pairs plots, separated by different groupings.\n\n# Highlight differences between the species\nggpairs(db_data, columns = 8:15, aes(colour = species, alpha = 0.5))\n\n\n\n# Highlight differences between the sexes\nggpairs(db_data, columns = 8:15, aes(colour = sex, alpha = 0.5))\n\n\n\n# Look at vacca only\nggpairs(db_data %>% filter(species == \"Onthophagus vacca\"), \n        columns = 8:15, aes(colour = sex, alpha = 0.5))\n\n\n\n# Look at andalusicus only\nggpairs(db_data %>% filter(species == \"Onthophagus andalusicus\"), \n        columns = 8:15, aes(colour = sex, alpha = 0.5))"
  },
  {
    "objectID": "dung_beetles/dung_beetles_data_exploration.html#prepare-for-modelling",
    "href": "dung_beetles/dung_beetles_data_exploration.html#prepare-for-modelling",
    "title": "Data exploration",
    "section": "Prepare for modelling",
    "text": "Prepare for modelling\nIn my view, it can be very helpful to plot the data to show the relationships that we are predicting to detect.\nIt’s important not to go on a fishing expedition here but instead focus on investigating our hypotheses.\nFor example, we are interested in how body size (pronotum width) was affected by the beetles being within/out of quarantine, and how this may have changed over the generations.\n\nggplot(data = db_data, aes(x = generation, y = pronotum_width, colour = treatment, shape = sex)) +\n  geom_jitter() +\n  facet_wrap(~species*shipment)\n\n\n\n\nThink about what this figure is showing us. Does each ‘shipment’ show a similar or different pattern? Can we test for a treatment effect over the generations using all shipments?\nPronotum width is a proxy for beetle size. How about beetle shape? We can use our sphericity variable to describe beetle shape.\n\nggplot(data = db_data, aes(x = generation, y = sphericity, colour = treatment, shape = sex)) +\n  geom_jitter() +\n  facet_wrap(~species*shipment)\n\n\n\n\nFinally, we have one trait that is likely under sexual selection - head horns. Let’s take a look at the relationship between body size (pronotum width) and horn size for the different species/shipments, then let’s split that by generation.\nNote: this won’t show nicely on the website but can be viewed when running the analyses on your computer.\n\n# Buy species/shipment combination\nggplot(data = db_data, aes(x = pronotum_width, y = head_horn, colour = treatment)) +\n  geom_point() +\n  facet_wrap(~species*shipment)\n\n\n\n# By species/shipment/generation combination\nggplot(data = db_data, aes(x = pronotum_width, y = head_horn, colour = treatment)) +\n  geom_point() +\n  facet_wrap(~species*shipment*generation)\n\n\n\n\nBefore we proceed we will want to go back and look at some of the outliers showing in the plots.\nFor example, we should check:\n\nid = 01_M_06, head_photo_id = 01_M_04: head_horn appears too small for body size\nid = 09_M_255, head_photo_id = 9_M_04: head_horn appears too big for body size\n\nNow that we’ve gotten more familiar with our data - let’s get modelling!"
  },
  {
    "objectID": "dung_beetles/dung_beetles_data_modelling.html",
    "href": "dung_beetles/dung_beetles_data_modelling.html",
    "title": "Data modelling",
    "section": "",
    "text": "Here we load the packages, set the ggplot theme and load the data.\n\nlibrary(\"tidyverse\")\nlibrary(\"broom\")\nlibrary(\"broom.mixed\")\nlibrary(\"emmeans\")\nlibrary(\"lme4\")\nlibrary(\"car\")\n\nSet the ggplot theme for all plots.\n\ntheme_set(theme_minimal())\ntheme_update(strip.text = element_text(face = \"bold\", size=10, hjust=0), \n             strip.background = element_rect(fill = \"grey80\", colour = NA),\n             axis.text = element_text(size=10, colour = \"black\"),\n             axis.title = element_text(size=12, colour = \"black\"))\n\nImport the data.\n\n# Read in the data\ndb_data <- \n  read_csv(\"data/db_data.csv\") %>%\n  \n  # Some R packages require factors to be explicit\n  mutate(across(.cols = c(id:shipment, treatment:sex), as.factor))"
  },
  {
    "objectID": "dung_beetles/dung_beetles_data_modelling.html#hypothesis-1a",
    "href": "dung_beetles/dung_beetles_data_modelling.html#hypothesis-1a",
    "title": "Data modelling",
    "section": "Hypothesis #1a",
    "text": "Hypothesis #1a\nFirst we want to know whether the treatment had an immediate effect on beetle morphology, and whether this effect differed for the two species.\nRecall from our data exploration that two of the Onthophagus vacca shipments did not have both treatments. We will filter these out for this analysis, as well as generations other than the first generation.\nHere, we first look at the effect on pronotum width.\nStep 1: pepare the data\n\n# Filter data\ndb_data_F1 <-\n  db_data %>%\n              filter(generation == 1 &\n                     !shipment %in% c(\"5A\", \"5B\")) %>%\n  droplevels()\n\n# Check sample sizes\ndb_data_F1 %>%\n  drop_na(pronotum_width) %>%\n  group_by(treatment, sex, shipment, species) %>%\n  count()\n\n\n\n  \n\n\n\nStep 2: fit the model\nHere we fit the model that tests whether there is a treatment effect on pronotum width, if this differs by species (treatment*species term), if males and females differ in their pronotum width (sex term) and whether there were any differences among the different shipments (the (1|shipment) random effect term).\n\n# Fit the model\nm1_pw <- lmer(pronotum_width ~ treatment*species + sex + (1|shipment),\n              data = db_data_F1)\n\nStep 3: check model assumptions\n\n# Fitted vs residuals plot\nplot(m1_pw)\n\n\n\n# Histogram of residuals\nggplot(data = augment(m1_pw), aes(x = .resid)) +\n  geom_histogram()\n\n\n\n\nThose diagnostic plots look OK to me.\nStep 4: look at model results\nNow that we have fit our model and checked that the model assumptions look OK, we want to know the answer to the questions we are asking our model to investigate (see above).\nWe will use the Anova function from the car package (notice the capital ‘A’) to test the statistical significance for each model term.\nImportant There are lots of problems with P values and null hypothesis significance testing. These are important to be aware of but that is not the focus of this unit. We can discuss these during our next meeting.\n\nAnova(m1_pw)\n\n\n\n  \n\n\n\nStep 5: understand the model results\nOur model is telling us that we have evidence for an effect of treatment on pronotum width and that this effect depends on the species being measured (statistically significant treatment:species term).\nWhat is difficult to understand from the model output is how the treatment is affecting pronotum width and how this effect differs for each species.\nTo understand these effects we can look at the estimated marginal means:\n\nm1_pw_emm <- emmeans(m1_pw, ~treatment*species)\n\n# Test for a treatment effect for each species separately\ncontrast(m1_pw_emm, by = \"species\") %>% tidy()\n\n\n\n  \n\n\n\nWe can see that for both species those beetles in the CT treatment tend to be smaller, but that this effect is larger for Onthophagus andalusicus.\nStep 6: visualise model predictions alongside raw data\nSo far this has been all very ‘black box’ - we have run a model and got some results. We have some idea of what the model is telling us, but how well does the model reflect the raw data? It’s also often much easier to communicate our results using a figure rather than just numbers in a table.\nThe following figure plots the the mean pronotum width for each species/treatment combination that is predicted by the model, the standard errors for these means, along with the raw data points.\n\n# Notice the use of tidy() from the generics package\nggplot(data = tidy(m1_pw_emm), \n       aes(x = treatment, y = estimate, colour = treatment, shape = treatment)) +\n  geom_point(size = 2) +\n  geom_errorbar(aes(ymin = estimate - std.error, ymax = estimate + std.error), width = 0) + \n  geom_jitter(data = db_data_F1, aes(x = treatment, y = pronotum_width, colour = treatment), width = 0.2, alpha = 0.2) +\n  # The following line could be used to change the colours\n  #scale_colour_viridis_d() +\n  facet_wrap(~species, ncol = 2) +\n  labs(y = \"Pronotum width (mm)\", x = \"Treament\") +\n  theme(legend.position = \"none\") +\n  theme(strip.text = element_text(face = \"italic\"))"
  },
  {
    "objectID": "dung_beetles/dung_beetles_data_modelling.html#hypothesis-1b",
    "href": "dung_beetles/dung_beetles_data_modelling.html#hypothesis-1b",
    "title": "Data modelling",
    "section": "Hypothesis #1b",
    "text": "Hypothesis #1b\nAbove we looked at pronotum width, now let’s ask the same questions but examining head horns. Because head horn size will increase with pronotum width, we want to look at the size of the horn relative to body size. To do this we simply include pronotum_width as another explanatory variable.\nWe will follow the same steps as we did with pronotum width…\nStep 1: prepare the data\nAlready done! Move to step 2.\nStep 2: fit the model\n\n# Fit the model\nm1_hh <- lmer(head_horn ~ pronotum_width + treatment*species + (1|shipment),\n              data = db_data_F1)\n\nboundary (singular) fit: see help('isSingular')\n\n\nYou will see we get an error: boundary (singular) fit: see help(‘isSingular’).\nThis is not an uncommon error, and seems to be happening because there is no variation associated with ‘shipment’. Increasing our sample size may help with this. For now I think it’s fine to push on.\nStep 3: check model assumptions\n\n# Fitted vs residuals plot\nplot(m1_hh)\n\n\n\n# Histogram of residuals\nggplot(data = augment(m1_hh), aes(x = .resid)) +\n  geom_histogram()\n\n\n\n\nThese plots don’t look wonderful but I think they are OK for our purposes.\nStep 4: look at model results\n\nAnova(m1_hh)\n\n\n\n  \n\n\n\nThe model is suggesting that there is a treatment effect on horns, and that this effect differs by species.\nStep 5: understand the model results\n\nemmeans(m1_hh, ~ treatment | species) %>%\n  contrast() %>% tidy()\n\n\n\n  \n\n\n\nWe see that we have evidence that O. vacca relative horn size is on average larger in the Q treatment, but that there is no difference between treatments for O. andalusicus horns.\nStep 6: visualise model predictions alongside raw data\nHere we plot the predicted head horn size for a given pronotum width, separately for each treatment x species combination (you will see there are four lines), along with the raw data.\nNote: ideally we would include the estimated error around each line but I haven’t figured out how to do this for the type of model we have fitted here.\n\nggplot(data = augment(m1_hh), \n       aes(x = pronotum_width, y = .fitted, colour = treatment)) +\n  geom_line() +\n  geom_jitter(aes(x = pronotum_width, y = head_horn, colour = treatment), alpha = 0.2) +\n  facet_wrap(~species) +\n  labs(x = \"Pronotum width (mm)\", y = \"Head horn (mm)\") +\n  guides(colour = guide_legend(title = \"Treatment\"))+\n  theme(strip.text = element_text(face = \"italic\"))"
  },
  {
    "objectID": "dung_beetles/dung_beetles_data_modelling.html#hypothesis-2",
    "href": "dung_beetles/dung_beetles_data_modelling.html#hypothesis-2",
    "title": "Data modelling",
    "section": "Hypothesis #2",
    "text": "Hypothesis #2\nNow let’s investigate whether these effects persist across the generations.\nRecall that our most complete data is for Onthophagus vacca shipments 2 and 4 up to generation 3. Let’s use just this data for this hypothesis for now.\nRecall that we didn’t see an effect of the treatment on pronotum width for O. vacca in generation 1, but we did see an effect on head horns.\nSo, here we’ll focus just on head horns…\nStep 1: prepare the data\nFilter the data to shipments 2 and 4 and remove the ‘parental’ generation.\n\n# Filter data\ndb_data_F1_4 <-\n  db_data %>%\n              filter(shipment %in% c(\"2\", \"4\") &\n                       generation != 0) %>%\n  #mutate(generation = as.factor(generation)) %>%\n  droplevels()\n\n# Check sample sizes\ndb_data_F1_4 %>%\n  drop_na(head_horn) %>%\n  group_by(treatment, generation, sex, shipment) %>%\n  count() \n\n\n\n  \n\n\n\nStep 2: fit the model\nBy including an interaction between treatment and generation (treatment*generation in the model) we are asking if the treatment effect varies across generations.\nNote that because here we have only two shipments, we have moved ‘shipment’ from being a random to a fixed effect. This is a detail that is not important at this stage, but please ask about this if you wish to discuss.\n\nm2_hh <- lm(head_horn ~ pronotum_width + treatment*generation + shipment,\n              data = db_data_F1_4)\n\nStep 3: check model assumptions\n\npar(mfrow = c(2,2)); plot(m2_hh); par(mfrow = c(1,1))\n\n\n\n\nStep 4: look at model results\n\nanova(m2_hh)\n\n\n\n  \n\n\n\nThere is no evidence for a treatment by generation interaction (treatment:generation term in the anova output), but there is an effect of treatment. This suggests that there is a treatment effect (consistent with our earlier finding) and that this persists through time.\nIt could also mean that we lacked the power necessary to detect the interaction effect….\nStep 5: understand the model results\n\nemmeans(m2_hh, ~ treatment | generation) %>%\n  contrast() %>% tidy()\n\n\n\n  \n\n\n\nThe Q beetles have larger horns relative to their body size compared to the CT beetles.\nStep 6: visualise model predictions alongside raw data\nThe following figure shows the predicted head horn size for a given pronotum width, along with the raw data, for each generation x shipment combination.\n\n# Strip labels are a little tricky to format. The following functions are used\n# in facet_grid below to aid with the labelling.\nappender_gen <- function(string, prefix = \"Generation: \") paste0(prefix, string)\nappender_ship <- function(string, prefix = \"Shipment: \") paste0(prefix, string)\n\n# Produce figure:\nggplot(data = augment(m2_hh, se_fit = TRUE), \n       aes(x = pronotum_width, y = .fitted, colour = treatment)) +\n  geom_line() +\n  geom_ribbon(aes(ymin = .fitted - .se.fit, ymax = .fitted + .se.fit), \n              alpha = 0.2) +\n  geom_jitter(aes(x = pronotum_width, y = head_horn, colour = treatment), alpha = 0.2) +\n  labs(x = \"Pronotum width (mm)\", y = \"Head horn (mm)\") +\n  guides(colour = guide_legend(title = \"Treatment\")) +\n  facet_grid(rows = vars(shipment), cols = vars(generation),\n             labeller = labeller(generation =  as_labeller(appender_gen),\n                                 shipment = as_labeller(appender_ship)))"
  },
  {
    "objectID": "dung_beetles/dung_beetles_data_modelling.html#hypothesis-3",
    "href": "dung_beetles/dung_beetles_data_modelling.html#hypothesis-3",
    "title": "Data modelling",
    "section": "Hypothesis #3",
    "text": "Hypothesis #3\nWe have found evidence that the treatment affected relative horn length and that this effect persisted for multiple generations.\nInterestingly, there did not appear to be any effect of generation.\nHowever, we used only a subset of the data in the above model. What if we use all the CT data we have that includes horn measures. This may increase our power to detect an effect of generation (i.e. does relative horn size change over time in ‘captive’ breeding).\nStep 1: prepare the data\nFilter the data to O. vacca CT beetles.\n\ndb_data_vac_CT <- \n  db_data %>%\n  filter(species == \"Onthophagus vacca\" &\n           treatment == \"CT\") %>%\n  droplevels()\n\n# Check sample sizes\ndb_data_vac_CT %>%\n  drop_na(head_horn) %>%\n  group_by(treatment, generation, sex, shipment) %>%\n  count() \n\n\n\n  \n\n\n\nStep 2: fit the model\n\nm3_hh <- lmer(head_horn ~ pronotum_width + generation + (1|shipment),\n              data = db_data_vac_CT)\n\nStep 3: check model assumptions\n\nplot(m3_hh)\n\n\n\nggplot(data = augment(m3_hh), aes(x = .resid)) +\n  geom_histogram()\n\n\n\n\nStep 4: look at model results\n\nAnova(m3_hh)\n\n\n\n  \n\n\n\nThere is no evidence for an effect of generation on horn length, but as in previous models there is a strong effect of pronotum width.\nStep 5: understand the model results\n\ntidy(m3_hh)\n\n\n\n  \n\n\n\nWe see there is a positive effect of pronotum width on horn length (see the positive estimate of the pronotum_width term). That is, as pronotum width increases, so does horn length.\nNothing surprising here - this was the reason we included pronotum width in the models in the first place.\nStep 6: visualise e raw data\nIf we want to visualise the relationship between pronotum width and horn length we can use the following:\n\nggplot(data = db_data_vac_CT, aes(x = pronotum_width, y = head_horn, colour = generation)) +\n  geom_point() +\n  scale_colour_viridis_c() +\n  labs(y = \"Horn length (mm)\", x = \"Pronotum width (mm)\") +\n  guides(colour = guide_legend(title = \"Generation\"))\n\n\n\n\nYou can see that as we increase generation (colours of the points), O. vacca males get larger horns but this is all down to them getting bigger!"
  },
  {
    "objectID": "dung_beetles/dung_beetles_index.html",
    "href": "dung_beetles/dung_beetles_index.html",
    "title": "Dung beetles",
    "section": "",
    "text": "Check through the pages carefully, run the analyses yourself, and come to the next meeting ready with questions!\nNote the figures and tables are generally in a rough and raw state. This reflects the iterative way I tend to work - produce a table/figure using (mostly) default settings and then improve it from there. I’m happy to chat about what needs to be done to improve presentation but I will leave it to each individual to produce their final results.\nYou will see that I’ve structured the data analysis in three parts - data cleaning, data exploration and data modelling. I’ve used pronotum width and a couple of hypotheses as examples that can be extended / modified."
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Welcome",
    "section": "",
    "text": "This site contains R code and some explanatory text to help with completing the data analyses for ANIM5502 in 2022.\nImportant!\nANIM5502 is not a coding nor a data analysis course - you have the Big Data course for those!\nThe purpose of this website is to provide all the code necessary for running your analyses for the ANIM5502 group project. If you find useful coding tips here then that is great, however, the main thing is to see how we use code/data analyses to answer interesting biological questions.\nSo explore the site, use it to help with your data analyses, but don’t get bogged down in the code!"
  },
  {
    "objectID": "index.html#how-to-use-this-site",
    "href": "index.html#how-to-use-this-site",
    "title": "Welcome",
    "section": "How to use this site",
    "text": "How to use this site\nUse the menu on the left to navigate the site.\nCode from each section can be copied using the clipboard symbol on the right of each ‘code block’ (the grey boxes). Function help pages can be accessed by clicking on a function name. You can try this below.\n\nprint(\"Success - too easy to copy and paste code\")"
  },
  {
    "objectID": "index.html#how-to-download-and-run-the-r-scripts-on-your-computer",
    "href": "index.html#how-to-download-and-run-the-r-scripts-on-your-computer",
    "title": "Welcome",
    "section": "How to download and run the R scripts on your computer",
    "text": "How to download and run the R scripts on your computer\nIf you are not a git/github user, you can use the following instructions to download and run the code on your computer.:\nFirst create an RStudio project\nOpen RStudio and then follow these steps:\n\nSelect the File menu followed by New Project\nChoose New Directory and then New Project\nGive the directory a name, for example, ANIM5502_2022_local, choose where to save the folder by selecting Browse, check the box next to Open in new session. Select Create Project.\nThen run the following code whilst in the opened project\nRunning this code will download all the R scrips as well as the prepared data.\nNote: it will not download the Excel file that is needed to run the data_cleaning code.\n\ndownload.file(\"https://raw.githubusercontent.com/jdberson/ANIM5502_2022/main/code/dung_beetles_data_cleaning.R\",\n              \"ANIM_5502_local_setup.R\")\n\nsource(ANIM_5502_local_setup.R)"
  }
]